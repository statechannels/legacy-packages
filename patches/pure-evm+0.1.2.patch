diff --git a/node_modules/pure-evm/pure-evm.js b/node_modules/pure-evm/pure-evm.js
index f0dc756..ade38d0 100644
--- a/node_modules/pure-evm/pure-evm.js
+++ b/node_modules/pure-evm/pure-evm.js
@@ -1,4 +1,4 @@
-import * as wasm from './pure-evm_bg';
+import * as wasm from './pure-evm_bg.wasm';
 
 let cachegetUint8Memory = null;
 function getUint8Memory() {
@@ -17,24 +17,16 @@ function passArray8ToWasm(arg) {
     return ptr;
 }
 
-function getArrayU8FromWasm(ptr, len) {
-    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);
-}
-
-let cachedGlobalArgumentPtr = null;
-function globalArgumentPtr() {
-    if (cachedGlobalArgumentPtr === null) {
-        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();
+let cachegetInt32Memory = null;
+function getInt32Memory() {
+    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {
+        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);
     }
-    return cachedGlobalArgumentPtr;
+    return cachegetInt32Memory;
 }
 
-let cachegetUint32Memory = null;
-function getUint32Memory() {
-    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {
-        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);
-    }
-    return cachegetUint32Memory;
+function getArrayU8FromWasm(ptr, len) {
+    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);
 }
 /**
 * @param {Uint8Array} code
@@ -42,35 +34,11 @@ function getUint32Memory() {
 * @returns {Uint8Array}
 */
 export function exec(code, data) {
-    const ptr0 = passArray8ToWasm(code);
-    const len0 = WASM_VECTOR_LEN;
-    const ptr1 = passArray8ToWasm(data);
-    const len1 = WASM_VECTOR_LEN;
-    const retptr = globalArgumentPtr();
-    wasm.exec(retptr, ptr0, len0, ptr1, len1);
-    const mem = getUint32Memory();
-    const rustptr = mem[retptr / 4];
-    const rustlen = mem[retptr / 4 + 1];
-
-    const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();
-    wasm.__wbindgen_free(rustptr, rustlen * 1);
-    return realRet;
-
-}
-
-const heap = new Array(32);
-
-heap.fill(undefined);
-
-heap.push(undefined, null, true, false);
-
-let heap_next = heap.length;
-
-function dropObject(idx) {
-    if (idx < 36) return;
-    heap[idx] = heap_next;
-    heap_next = idx;
+    const retptr = 8;
+    const ret = wasm.exec(retptr, passArray8ToWasm(code), WASM_VECTOR_LEN, passArray8ToWasm(data), WASM_VECTOR_LEN);
+    const memi32 = getInt32Memory();
+    const v0 = getArrayU8FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();
+    wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);
+    return v0;
 }
 
-export function __wbindgen_object_drop_ref(i) { dropObject(i); }
-
diff --git a/node_modules/pure-evm/pure-evm_bg.d.ts b/node_modules/pure-evm/pure-evm_bg.d.ts
new file mode 100644
index 0000000..6d14fa6
--- /dev/null
+++ b/node_modules/pure-evm/pure-evm_bg.d.ts
@@ -0,0 +1,5 @@
+/* tslint:disable */
+export const memory: WebAssembly.Memory;
+export function exec(a: number, b: number, c: number, d: number, e: number): void;
+export function __wbindgen_malloc(a: number): number;
+export function __wbindgen_free(a: number, b: number): void;
diff --git a/node_modules/pure-evm/pure-evm_bg.wasm b/node_modules/pure-evm/pure-evm_bg.wasm
index 8abc54b..2b42052 100644
Binary files a/node_modules/pure-evm/pure-evm_bg.wasm and b/node_modules/pure-evm/pure-evm_bg.wasm differ
diff --git a/node_modules/pure-evm/pure-evm_main.js b/node_modules/pure-evm/pure-evm_main.js
index 24c345a..a179273 100644
--- a/node_modules/pure-evm/pure-evm_main.js
+++ b/node_modules/pure-evm/pure-evm_main.js
@@ -1,4 +1,4 @@
-var wasm;
+let wasm;
 
 let cachegetUint8Memory = null;
 function getUint8Memory() {
@@ -17,24 +17,16 @@ function passArray8ToWasm(arg) {
     return ptr;
 }
 
-function getArrayU8FromWasm(ptr, len) {
-    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);
-}
-
-let cachedGlobalArgumentPtr = null;
-function globalArgumentPtr() {
-    if (cachedGlobalArgumentPtr === null) {
-        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();
+let cachegetInt32Memory = null;
+function getInt32Memory() {
+    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {
+        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);
     }
-    return cachedGlobalArgumentPtr;
+    return cachegetInt32Memory;
 }
 
-let cachegetUint32Memory = null;
-function getUint32Memory() {
-    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {
-        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);
-    }
-    return cachegetUint32Memory;
+function getArrayU8FromWasm(ptr, len) {
+    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);
 }
 /**
 * @param {Uint8Array} code
@@ -42,37 +34,13 @@ function getUint32Memory() {
 * @returns {Uint8Array}
 */
 module.exports.exec = function(code, data) {
-    const ptr0 = passArray8ToWasm(code);
-    const len0 = WASM_VECTOR_LEN;
-    const ptr1 = passArray8ToWasm(data);
-    const len1 = WASM_VECTOR_LEN;
-    const retptr = globalArgumentPtr();
-    wasm.exec(retptr, ptr0, len0, ptr1, len1);
-    const mem = getUint32Memory();
-    const rustptr = mem[retptr / 4];
-    const rustlen = mem[retptr / 4 + 1];
-
-    const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();
-    wasm.__wbindgen_free(rustptr, rustlen * 1);
-    return realRet;
-
+    const retptr = 8;
+    const ret = wasm.exec(retptr, passArray8ToWasm(code), WASM_VECTOR_LEN, passArray8ToWasm(data), WASM_VECTOR_LEN);
+    const memi32 = getInt32Memory();
+    const v0 = getArrayU8FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();
+    wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);
+    return v0;
 };
 
-const heap = new Array(32);
-
-heap.fill(undefined);
-
-heap.push(undefined, null, true, false);
-
-let heap_next = heap.length;
-
-function dropObject(idx) {
-    if (idx < 36) return;
-    heap[idx] = heap_next;
-    heap_next = idx;
-}
-
-module.exports.__wbindgen_object_drop_ref = function(i) { dropObject(i); };
-
 wasm = require('./pure-evm_bg');
 
