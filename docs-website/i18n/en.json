{
  "_comment": "This file is auto-generated by write-translations.js",
  "localized-strings": {
    "next": "Next",
    "previous": "Previous",
    "tagline": "A tech stack for state channel applications and networks",
    "docs": {
      "app-devs/hook-up-messaging": {
        "title": "Hook up your messaging layer"
      },
      "app-devs/app-devs-intro": {
        "title": "Introduction"
      },
      "app-devs/make-api-calls": {
        "title": "Make Wallet API calls"
      },
      "app-devs/quick-start-contracts": {
        "title": "Quick start (contracts)"
      },
      "app-devs/quick-start-dapp": {
        "title": "Quick start (Dapp)"
      },
      "app-devs/recommended-patterns": {
        "title": "Recommended patterns"
      },
      "contract-api/contract-inheritance": {
        "title": "Contract Inheritance"
      },
      "contract-api/natspec/Adjudicator": {
        "title": "Adjudicator.sol"
      },
      "contract-api/natspec/AssetHolder": {
        "title": "AssetHolder.sol"
      },
      "contract-api/natspec/ConsensusApp": {
        "title": "ConsensusApp.sol"
      },
      "contract-api/natspec/Context": {
        "title": "Context.sol"
      },
      "contract-api/natspec/CountingApp": {
        "title": "CountingApp.sol"
      },
      "contract-api/natspec/ERC20": {
        "title": "ERC20.sol"
      },
      "contract-api/natspec/ERC20AssetHolder": {
        "title": "ERC20AssetHolder.sol"
      },
      "contract-api/natspec/ETHAssetHolder": {
        "title": "ETHAssetHolder.sol"
      },
      "contract-api/natspec/ForceMove": {
        "title": "ForceMove.sol"
      },
      "contract-api/natspec/ForceMoveApp": {
        "title": "ForceMoveApp.sol"
      },
      "contract-api/natspec/IAssetHolder": {
        "title": "IAssetHolder.sol"
      },
      "contract-api/natspec/IERC20": {
        "title": "IERC20.sol"
      },
      "contract-api/natspec/IForceMove": {
        "title": "IForceMove.sol"
      },
      "contract-api/natspec/Migrations": {
        "title": "Migrations.sol"
      },
      "contract-api/natspec/NitroAdjudicator": {
        "title": "NitroAdjudicator.sol"
      },
      "contract-api/natspec/Outcome": {
        "title": "Outcome.sol"
      },
      "contract-api/natspec/RockPaperScissors": {
        "title": "RockPaperScissors.sol"
      },
      "contract-api/natspec/SafeMath": {
        "title": "SafeMath.sol"
      },
      "contract-api/natspec/SingleAssetPayments": {
        "title": "SingleAssetPayments.sol"
      },
      "contract-api/natspec/TESTAssetHolder": {
        "title": "TESTAssetHolder.sol"
      },
      "contract-api/natspec/TESTAssetHolder2": {
        "title": "TESTAssetHolder2.sol"
      },
      "contract-api/natspec/TestErc20AssetHolder": {
        "title": "TestErc20AssetHolder.sol"
      },
      "contract-api/natspec/TestEthAssetHolder": {
        "title": "TestEthAssetHolder.sol"
      },
      "contract-api/natspec/TESTForceMove": {
        "title": "TESTForceMove.sol"
      },
      "contract-api/natspec/TESTNitroAdjudicator": {
        "title": "TESTNitroAdjudicator.sol"
      },
      "contract-api/natspec/Token": {
        "title": "Token.sol"
      },
      "contract-api/natspec/TrivialApp": {
        "title": "TrivialApp.sol"
      },
      "implementation-notes/asset-holder": {
        "title": "AssetHolder.sol"
      },
      "implementation-notes/consensus-app": {
        "title": "ConsensusApp.sol"
      },
      "implementation-notes/force-move": {
        "title": "ForceMove.sol"
      },
      "implementation-notes/contract-devs-intro": {
        "title": "Introduction"
      },
      "implementation-notes/nitro-adjudicator": {
        "title": "NitroAdjudicator.sol",
        "sidebar_label": "NitroAdjudicator.sol"
      },
      "implementation-notes/single-asset-payments": {
        "title": "SingleAssetPayments.sol"
      },
      "natspec/Address": {
        "title": "Address.sol"
      },
      "natspec/Adjudicator": {
        "title": "Adjudicator.sol"
      },
      "natspec/AssetHolder": {
        "title": "AssetHolder.sol"
      },
      "natspec/ConsensusApp": {
        "title": "ConsensusApp.sol"
      },
      "natspec/Context": {
        "title": "Context.sol"
      },
      "natspec/CountingApp": {
        "title": "CountingApp.sol"
      },
      "natspec/ERC20": {
        "title": "ERC20.sol"
      },
      "natspec/ERC20AssetHolder": {
        "title": "ERC20AssetHolder.sol"
      },
      "natspec/ETHAssetHolder": {
        "title": "ETHAssetHolder.sol"
      },
      "natspec/ForceMove": {
        "title": "ForceMove.sol"
      },
      "natspec/ForceMoveApp": {
        "title": "ForceMoveApp.sol"
      },
      "natspec/IAssetHolder": {
        "title": "IAssetHolder.sol"
      },
      "natspec/IERC20": {
        "title": "IERC20.sol"
      },
      "natspec/IForceMove": {
        "title": "IForceMove.sol"
      },
      "natspec/NitroAdjudicator": {
        "title": "NitroAdjudicator.sol"
      },
      "natspec/Outcome": {
        "title": "Outcome.sol"
      },
      "natspec/SafeMath": {
        "title": "SafeMath.sol"
      },
      "natspec/SingleAssetPayments": {
        "title": "SingleAssetPayments.sol"
      },
      "natspec/TESTAssetHolder": {
        "title": "TESTAssetHolder.sol"
      },
      "natspec/TESTAssetHolder2": {
        "title": "TESTAssetHolder2.sol"
      },
      "natspec/TestErc20AssetHolder": {
        "title": "TestErc20AssetHolder.sol"
      },
      "natspec/TestEthAssetHolder": {
        "title": "TestEthAssetHolder.sol"
      },
      "natspec/TESTForceMove": {
        "title": "TESTForceMove.sol"
      },
      "natspec/TESTNitroAdjudicator": {
        "title": "TESTNitroAdjudicator.sol"
      },
      "natspec/Token": {
        "title": "Token.sol"
      },
      "natspec/TrivialApp": {
        "title": "TrivialApp.sol"
      },
      "overview": {
        "title": "Overview"
      },
      "products": {
        "title": "Our products"
      },
      "protocol-docs/client-specification/auxiliary-protocols": {
        "title": "Auxiliary Protocols",
        "sidebar_label": "Auxiliary Protocols"
      },
      "protocol-docs/wallet-devs-intro": {
        "title": "Introduction"
      },
      "protocol-docs/quick-start": {
        "title": "Quick Start"
      },
      "protocol-docs/tutorial": {
        "title": "Tutorial"
      },
      "protocol-tutorial/clear-a-challenge": {
        "title": "Clear a challenge"
      },
      "protocol-tutorial/deposit-assets": {
        "title": "Deposit Assets"
      },
      "protocol-tutorial/execute-state-transitions": {
        "title": "Execute state transitions off chain"
      },
      "protocol-tutorial/finalize-a-channel-happy": {
        "title": "Finalize a channel (happy)"
      },
      "protocol-tutorial/finalize-a-channel-sad": {
        "title": "Finalize a channel (sad)"
      },
      "protocol-tutorial/off-chain-funding": {
        "title": "Off-chain funding"
      },
      "protocol-tutorial/outcomes": {
        "title": "Understand Outcomes"
      },
      "protocol-tutorial/release-assets": {
        "title": "Release assets"
      },
      "protocol-tutorial/understand-channel-storage": {
        "title": "Understand channel storage"
      },
      "typescript-api/channel-client.browserchannelclientinterface.approvebudgetandfund": {
        "title": "BrowserChannelClientInterface.approveBudgetAndFund() method"
      },
      "typescript-api/channel-client.browserchannelclientinterface.closeandwithdraw": {
        "title": "BrowserChannelClientInterface.closeAndWithdraw() method"
      },
      "typescript-api/channel-client.browserchannelclientinterface.getbudget": {
        "title": "BrowserChannelClientInterface.getBudget() method"
      },
      "typescript-api/channel-client.browserchannelclientinterface": {
        "title": "BrowserChannelClientInterface interface"
      },
      "typescript-api/channel-client.browserchannelclientinterface.onbudgetupdated": {
        "title": "BrowserChannelClientInterface.onBudgetUpdated property"
      },
      "typescript-api/channel-client.channelclient._constructor_": {
        "title": "ChannelClient.(constructor)"
      },
      "typescript-api/channel-client.channelclient.approvebudgetandfund": {
        "title": "ChannelClient.approveBudgetAndFund() method"
      },
      "typescript-api/channel-client.channelclient.challengechannel": {
        "title": "ChannelClient.challengeChannel() method"
      },
      "typescript-api/channel-client.channelclient.channelstate": {
        "title": "ChannelClient.channelState property"
      },
      "typescript-api/channel-client.channelclient.closeandwithdraw": {
        "title": "ChannelClient.closeAndWithdraw() method"
      },
      "typescript-api/channel-client.channelclient.closechannel": {
        "title": "ChannelClient.closeChannel() method"
      },
      "typescript-api/channel-client.channelclient.createchannel": {
        "title": "ChannelClient.createChannel() method"
      },
      "typescript-api/channel-client.channelclient.destinationaddress": {
        "title": "ChannelClient.destinationAddress property"
      },
      "typescript-api/channel-client.channelclient.getbudget": {
        "title": "ChannelClient.getBudget() method"
      },
      "typescript-api/channel-client.channelclient.getchannels": {
        "title": "ChannelClient.getChannels() method"
      },
      "typescript-api/channel-client.channelclient.getstate": {
        "title": "ChannelClient.getState() method"
      },
      "typescript-api/channel-client.channelclient.joinchannel": {
        "title": "ChannelClient.joinChannel() method"
      },
      "typescript-api/channel-client.channelclient": {
        "title": "ChannelClient class"
      },
      "typescript-api/channel-client.channelclient.onbudgetupdated": {
        "title": "ChannelClient.onBudgetUpdated() method"
      },
      "typescript-api/channel-client.channelclient.onchannelproposed": {
        "title": "ChannelClient.onChannelProposed() method"
      },
      "typescript-api/channel-client.channelclient.onchannelupdated": {
        "title": "ChannelClient.onChannelUpdated() method"
      },
      "typescript-api/channel-client.channelclient.onmessagequeued": {
        "title": "ChannelClient.onMessageQueued() method"
      },
      "typescript-api/channel-client.channelclient.provider": {
        "title": "ChannelClient.provider property"
      },
      "typescript-api/channel-client.channelclient.pushmessage": {
        "title": "ChannelClient.pushMessage() method"
      },
      "typescript-api/channel-client.channelclient.signingaddress": {
        "title": "ChannelClient.signingAddress property"
      },
      "typescript-api/channel-client.channelclient.updatechannel": {
        "title": "ChannelClient.updateChannel() method"
      },
      "typescript-api/channel-client.channelclient.walletversion": {
        "title": "ChannelClient.walletVersion property"
      },
      "typescript-api/channel-client.channelclientinterface.challengechannel": {
        "title": "ChannelClientInterface.challengeChannel property"
      },
      "typescript-api/channel-client.channelclientinterface.channelstate": {
        "title": "ChannelClientInterface.channelState property"
      },
      "typescript-api/channel-client.channelclientinterface.closechannel": {
        "title": "ChannelClientInterface.closeChannel property"
      },
      "typescript-api/channel-client.channelclientinterface.createchannel": {
        "title": "ChannelClientInterface.createChannel property"
      },
      "typescript-api/channel-client.channelclientinterface.destinationaddress": {
        "title": "ChannelClientInterface.destinationAddress property"
      },
      "typescript-api/channel-client.channelclientinterface.getchannels": {
        "title": "ChannelClientInterface.getChannels() method"
      },
      "typescript-api/channel-client.channelclientinterface.getstate": {
        "title": "ChannelClientInterface.getState property"
      },
      "typescript-api/channel-client.channelclientinterface.joinchannel": {
        "title": "ChannelClientInterface.joinChannel property"
      },
      "typescript-api/channel-client.channelclientinterface": {
        "title": "ChannelClientInterface interface"
      },
      "typescript-api/channel-client.channelclientinterface.onchannelproposed": {
        "title": "ChannelClientInterface.onChannelProposed property"
      },
      "typescript-api/channel-client.channelclientinterface.onchannelupdated": {
        "title": "ChannelClientInterface.onChannelUpdated property"
      },
      "typescript-api/channel-client.channelclientinterface.onmessagequeued": {
        "title": "ChannelClientInterface.onMessageQueued property"
      },
      "typescript-api/channel-client.channelclientinterface.provider": {
        "title": "ChannelClientInterface.provider property"
      },
      "typescript-api/channel-client.channelclientinterface.pushmessage": {
        "title": "ChannelClientInterface.pushMessage property"
      },
      "typescript-api/channel-client.channelclientinterface.signingaddress": {
        "title": "ChannelClientInterface.signingAddress property"
      },
      "typescript-api/channel-client.channelclientinterface.updatechannel": {
        "title": "ChannelClientInterface.updateChannel property"
      },
      "typescript-api/channel-client.channelclientinterface.walletversion": {
        "title": "ChannelClientInterface.walletVersion property"
      },
      "typescript-api/channel-client.errorcode": {
        "title": "ErrorCode variable"
      },
      "typescript-api/channel-client.ethereumnotenablederrorcode": {
        "title": "EthereumNotEnabledErrorCode variable"
      },
      "typescript-api/channel-client.fakebrowserchannelprovider.approvebudgetandfund": {
        "title": "FakeBrowserChannelProvider.approveBudgetAndFund() method"
      },
      "typescript-api/channel-client.fakebrowserchannelprovider.budget": {
        "title": "FakeBrowserChannelProvider.budget property"
      },
      "typescript-api/channel-client.fakebrowserchannelprovider.closeandwithdraw": {
        "title": "FakeBrowserChannelProvider.closeAndWithdraw() method"
      },
      "typescript-api/channel-client.fakebrowserchannelprovider.enable": {
        "title": "FakeBrowserChannelProvider.enable() method"
      },
      "typescript-api/channel-client.fakebrowserchannelprovider.getbudget": {
        "title": "FakeBrowserChannelProvider.getBudget() method"
      },
      "typescript-api/channel-client.fakebrowserchannelprovider": {
        "title": "FakeBrowserChannelProvider class"
      },
      "typescript-api/channel-client.fakebrowserchannelprovider.mountwalletcomponent": {
        "title": "FakeBrowserChannelProvider.mountWalletComponent() method"
      },
      "typescript-api/channel-client.fakebrowserchannelprovider.notifyappbudgetupdated": {
        "title": "FakeBrowserChannelProvider.notifyAppBudgetUpdated() method"
      },
      "typescript-api/channel-client.fakebrowserchannelprovider.send": {
        "title": "FakeBrowserChannelProvider.send() method"
      },
      "typescript-api/channel-client.fakechannelprovider.closechannel": {
        "title": "FakeChannelProvider.closeChannel() method"
      },
      "typescript-api/channel-client.fakechannelprovider.createchannel": {
        "title": "FakeChannelProvider.createChannel() method"
      },
      "typescript-api/channel-client.fakechannelprovider.destinationaddress": {
        "title": "FakeChannelProvider.destinationAddress property"
      },
      "typescript-api/channel-client.fakechannelprovider.events": {
        "title": "FakeChannelProvider.events property"
      },
      "typescript-api/channel-client.fakechannelprovider.findchannel": {
        "title": "FakeChannelProvider.findChannel() method"
      },
      "typescript-api/channel-client.fakechannelprovider.getaddress": {
        "title": "FakeChannelProvider.getAddress() method"
      },
      "typescript-api/channel-client.fakechannelprovider.getopponentindex": {
        "title": "FakeChannelProvider.getOpponentIndex() method"
      },
      "typescript-api/channel-client.fakechannelprovider.getplayerindex": {
        "title": "FakeChannelProvider.getPlayerIndex() method"
      },
      "typescript-api/channel-client.fakechannelprovider.getstate": {
        "title": "FakeChannelProvider.getState() method"
      },
      "typescript-api/channel-client.fakechannelprovider.internaladdress": {
        "title": "FakeChannelProvider.internalAddress property"
      },
      "typescript-api/channel-client.fakechannelprovider.ischannelresult": {
        "title": "FakeChannelProvider.isChannelResult() method"
      },
      "typescript-api/channel-client.fakechannelprovider.joinchannel": {
        "title": "FakeChannelProvider.joinChannel() method"
      },
      "typescript-api/channel-client.fakechannelprovider.lateststate": {
        "title": "FakeChannelProvider.latestState property"
      },
      "typescript-api/channel-client.fakechannelprovider": {
        "title": "FakeChannelProvider class"
      },
      "typescript-api/channel-client.fakechannelprovider.notifyappbudgetupdated": {
        "title": "FakeChannelProvider.notifyAppBudgetUpdated() method"
      },
      "typescript-api/channel-client.fakechannelprovider.notifyappchannelupdated": {
        "title": "FakeChannelProvider.notifyAppChannelUpdated() method"
      },
      "typescript-api/channel-client.fakechannelprovider.notifyopponent": {
        "title": "FakeChannelProvider.notifyOpponent() method"
      },
      "typescript-api/channel-client.fakechannelprovider.off": {
        "title": "FakeChannelProvider.off property"
      },
      "typescript-api/channel-client.fakechannelprovider.on": {
        "title": "FakeChannelProvider.on property"
      },
      "typescript-api/channel-client.fakechannelprovider.opponentaddress": {
        "title": "FakeChannelProvider.opponentAddress property"
      },
      "typescript-api/channel-client.fakechannelprovider.opponentindex": {
        "title": "FakeChannelProvider.opponentIndex property"
      },
      "typescript-api/channel-client.fakechannelprovider.playerindex": {
        "title": "FakeChannelProvider.playerIndex property"
      },
      "typescript-api/channel-client.fakechannelprovider.pushmessage": {
        "title": "FakeChannelProvider.pushMessage() method"
      },
      "typescript-api/channel-client.fakechannelprovider.send": {
        "title": "FakeChannelProvider.send() method"
      },
      "typescript-api/channel-client.fakechannelprovider.setaddress": {
        "title": "FakeChannelProvider.setAddress() method"
      },
      "typescript-api/channel-client.fakechannelprovider.setstate": {
        "title": "FakeChannelProvider.setState() method"
      },
      "typescript-api/channel-client.fakechannelprovider.signingaddress": {
        "title": "FakeChannelProvider.signingAddress property"
      },
      "typescript-api/channel-client.fakechannelprovider.subscribe": {
        "title": "FakeChannelProvider.subscribe() method"
      },
      "typescript-api/channel-client.fakechannelprovider.unsubscribe": {
        "title": "FakeChannelProvider.unsubscribe() method"
      },
      "typescript-api/channel-client.fakechannelprovider.updatechannel": {
        "title": "FakeChannelProvider.updateChannel() method"
      },
      "typescript-api/channel-client.fakechannelprovider.updateplayerindex": {
        "title": "FakeChannelProvider.updatePlayerIndex() method"
      },
      "typescript-api/channel-client.fakechannelprovider.url": {
        "title": "FakeChannelProvider.url property"
      },
      "typescript-api/channel-client.fakechannelprovider.verifyturnnum": {
        "title": "FakeChannelProvider.verifyTurnNum() method"
      },
      "typescript-api/channel-client.fakechannelprovider.walletversion": {
        "title": "FakeChannelProvider.walletVersion property"
      },
      "typescript-api/channel-client": {
        "title": "channel-client package"
      },
      "typescript-api/channel-client.tokenallocations": {
        "title": "TokenAllocations type"
      },
      "typescript-api/channel-client.unsubscribefunction": {
        "title": "UnsubscribeFunction type"
      },
      "typescript-api/channel-client.userdeclinederrorcode": {
        "title": "UserDeclinedErrorCode variable"
      },
      "typescript-api/iframe-channel-provider.channelprovider": {
        "title": "channelProvider variable"
      },
      "typescript-api/iframe-channel-provider.channelproviderinterface.destinationaddress": {
        "title": "ChannelProviderInterface.destinationAddress property"
      },
      "typescript-api/iframe-channel-provider.channelproviderinterface": {
        "title": "ChannelProviderInterface interface"
      },
      "typescript-api/iframe-channel-provider.channelproviderinterface.off": {
        "title": "ChannelProviderInterface.off property"
      },
      "typescript-api/iframe-channel-provider.channelproviderinterface.on": {
        "title": "ChannelProviderInterface.on property"
      },
      "typescript-api/iframe-channel-provider.channelproviderinterface.send": {
        "title": "ChannelProviderInterface.send() method"
      },
      "typescript-api/iframe-channel-provider.channelproviderinterface.signingaddress": {
        "title": "ChannelProviderInterface.signingAddress property"
      },
      "typescript-api/iframe-channel-provider.channelproviderinterface.subscribe": {
        "title": "ChannelProviderInterface.subscribe property"
      },
      "typescript-api/iframe-channel-provider.channelproviderinterface.unsubscribe": {
        "title": "ChannelProviderInterface.unsubscribe property"
      },
      "typescript-api/iframe-channel-provider.channelproviderinterface.walletversion": {
        "title": "ChannelProviderInterface.walletVersion property"
      },
      "typescript-api/iframe-channel-provider.eventtype": {
        "title": "EventType interface"
      },
      "typescript-api/iframe-channel-provider.iframechannelproviderinterface": {
        "title": "IFrameChannelProviderInterface interface"
      },
      "typescript-api/iframe-channel-provider.iframechannelproviderinterface.mountwalletcomponent": {
        "title": "IFrameChannelProviderInterface.mountWalletComponent() method"
      },
      "typescript-api/iframe-channel-provider.isjsonrpcerrorresponse": {
        "title": "isJsonRpcErrorResponse() function"
      },
      "typescript-api/iframe-channel-provider.isjsonrpcnotification": {
        "title": "isJsonRpcNotification() function"
      },
      "typescript-api/iframe-channel-provider.isjsonrpcresponse": {
        "title": "isJsonRpcResponse() function"
      },
      "typescript-api/iframe-channel-provider.jsonrpcerror": {
        "title": "JsonRpcError type"
      },
      "typescript-api/iframe-channel-provider.jsonrpcerrorresponse": {
        "title": "JsonRpcErrorResponse type"
      },
      "typescript-api/iframe-channel-provider.jsonrpcnotification.jsonrpc": {
        "title": "JsonRpcNotification.jsonrpc property"
      },
      "typescript-api/iframe-channel-provider.jsonrpcnotification": {
        "title": "JsonRpcNotification interface"
      },
      "typescript-api/iframe-channel-provider.jsonrpcnotification.method": {
        "title": "JsonRpcNotification.method property"
      },
      "typescript-api/iframe-channel-provider.jsonrpcnotification.params": {
        "title": "JsonRpcNotification.params property"
      },
      "typescript-api/iframe-channel-provider.jsonrpcrequest.id": {
        "title": "JsonRpcRequest.id property"
      },
      "typescript-api/iframe-channel-provider.jsonrpcrequest.jsonrpc": {
        "title": "JsonRpcRequest.jsonrpc property"
      },
      "typescript-api/iframe-channel-provider.jsonrpcrequest": {
        "title": "JsonRpcRequest interface"
      },
      "typescript-api/iframe-channel-provider.jsonrpcrequest.method": {
        "title": "JsonRpcRequest.method property"
      },
      "typescript-api/iframe-channel-provider.jsonrpcrequest.params": {
        "title": "JsonRpcRequest.params property"
      },
      "typescript-api/iframe-channel-provider.jsonrpcresponse.id": {
        "title": "JsonRpcResponse.id property"
      },
      "typescript-api/iframe-channel-provider.jsonrpcresponse.jsonrpc": {
        "title": "JsonRpcResponse.jsonrpc property"
      },
      "typescript-api/iframe-channel-provider.jsonrpcresponse": {
        "title": "JsonRpcResponse interface"
      },
      "typescript-api/iframe-channel-provider.jsonrpcresponse.result": {
        "title": "JsonRpcResponse.result property"
      },
      "typescript-api/iframe-channel-provider": {
        "title": "iframe-channel-provider package"
      },
      "typescript-api/iframe-channel-provider.offtype": {
        "title": "OffType type"
      },
      "typescript-api/iframe-channel-provider.ontype": {
        "title": "OnType type"
      },
      "typescript-api/iframe-channel-provider.subscribetype": {
        "title": "SubscribeType type"
      },
      "typescript-api/iframe-channel-provider.unsubscribetype": {
        "title": "UnsubscribeType type"
      },
      "typescript-api/iframe-channel-provider.walletjsonrpcapi": {
        "title": "WalletJsonRpcAPI type"
      },
      "typescript-api/iframe-channel-provider.web3channelproviderinterface.enable": {
        "title": "Web3ChannelProviderInterface.enable() method"
      },
      "typescript-api/iframe-channel-provider.web3channelproviderinterface": {
        "title": "Web3ChannelProviderInterface interface"
      },
      "typescript-api/index": {
        "title": "API Reference"
      },
      "version-0.1.1/contract-api/version-0.1.1-contract-inheritance": {
        "title": "Contract Inheritance"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-Adjudicator": {
        "title": "Adjudicator.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-AssetHolder": {
        "title": "AssetHolder.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-ConsensusApp": {
        "title": "ConsensusApp.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-Context": {
        "title": "Context.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-CountingApp": {
        "title": "CountingApp.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-ERC20": {
        "title": "ERC20.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-ERC20AssetHolder": {
        "title": "ERC20AssetHolder.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-ETHAssetHolder": {
        "title": "ETHAssetHolder.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-ForceMove": {
        "title": "ForceMove.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-ForceMoveApp": {
        "title": "ForceMoveApp.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-IAssetHolder": {
        "title": "IAssetHolder.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-IERC20": {
        "title": "IERC20.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-IForceMove": {
        "title": "IForceMove.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-Migrations": {
        "title": "Migrations.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-NitroAdjudicator": {
        "title": "NitroAdjudicator.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-Outcome": {
        "title": "Outcome.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-RockPaperScissors": {
        "title": "RockPaperScissors.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-SafeMath": {
        "title": "SafeMath.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-SingleAssetPayments": {
        "title": "SingleAssetPayments.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-TESTAssetHolder": {
        "title": "TESTAssetHolder.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-TESTAssetHolder2": {
        "title": "TESTAssetHolder2.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-TestErc20AssetHolder": {
        "title": "TestErc20AssetHolder.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-TestEthAssetHolder": {
        "title": "TestEthAssetHolder.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-TESTForceMove": {
        "title": "TESTForceMove.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-TESTNitroAdjudicator": {
        "title": "TESTNitroAdjudicator.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-Token": {
        "title": "Token.sol"
      },
      "version-0.1.1/contract-api/natspec/version-0.1.1-TrivialApp": {
        "title": "TrivialApp.sol"
      },
      "version-0.1.1/contract-devs/version-0.1.1-asset-holder": {
        "title": "AssetHolder.sol"
      },
      "version-0.1.1/contract-devs/version-0.1.1-consensus-app": {
        "title": "ConsensusApp.sol"
      },
      "version-0.1.1/contract-devs/version-0.1.1-force-move": {
        "title": "ForceMove.sol"
      },
      "version-0.1.1/contract-devs/version-0.1.1-contract-devs-intro": {
        "title": "Introduction"
      },
      "version-0.1.1/contract-devs/version-0.1.1-nitro-adjudicator": {
        "title": "NitroAdjudicator.sol",
        "sidebar_label": "NitroAdjudicator.sol"
      },
      "version-0.1.1/contract-devs/version-0.1.1-single-asset-payments": {
        "title": "SingleAssetPayments.sol"
      },
      "version-0.1.1/dapp-devs/version-0.1.1-dapp-devs-intro": {
        "title": "Introduction"
      },
      "version-0.1.1/dapp-devs/version-0.1.1-quick-start": {
        "title": "Quick start"
      },
      "version-0.1.1/version-0.1.1-overview": {
        "title": "Overview"
      },
      "version-0.1.1/wallet-dev-tutorial/version-0.1.1-clear-a-challenge": {
        "title": "Clear a challenge"
      },
      "version-0.1.1/wallet-dev-tutorial/version-0.1.1-deposit-assets": {
        "title": "Deposit Assets"
      },
      "version-0.1.1/wallet-dev-tutorial/version-0.1.1-execute-state-transitions": {
        "title": "Execute state transitions off chain"
      },
      "version-0.1.1/wallet-dev-tutorial/version-0.1.1-finalize-a-channel-happy": {
        "title": "Finalize a channel (happy)"
      },
      "version-0.1.1/wallet-dev-tutorial/version-0.1.1-finalize-a-channel-sad": {
        "title": "Finalize a channel (sad)"
      },
      "version-0.1.1/wallet-dev-tutorial/version-0.1.1-off-chain-funding": {
        "title": "Off-chain funding"
      },
      "version-0.1.1/wallet-dev-tutorial/version-0.1.1-outcomes": {
        "title": "Understand Outcomes"
      },
      "version-0.1.1/wallet-dev-tutorial/version-0.1.1-release-assets": {
        "title": "Release assets"
      },
      "version-0.1.1/wallet-dev-tutorial/version-0.1.1-understand-channel-storage": {
        "title": "Understand channel storage"
      },
      "version-0.1.1/wallet-devs/client-specification/version-0.1.1-auxiliary-protocols": {
        "title": "Auxiliary Protocols",
        "sidebar_label": "Auxiliary Protocols"
      },
      "version-0.1.1/wallet-devs/version-0.1.1-wallet-devs-intro": {
        "title": "Introduction"
      },
      "version-0.1.1/wallet-devs/version-0.1.1-quick-start": {
        "title": "Quick Start"
      },
      "version-0.1.1/wallet-devs/version-0.1.1-tutorial": {
        "title": "Tutorial"
      }
    },
    "links": {
      "Docs": "Docs",
      "Contract API": "Contract API",
      "Help": "Help"
    },
    "categories": {
      "Overview": "Overview",
      "App Developers": "App Developers",
      "Protocol Docs": "Protocol Docs",
      "Protocol Tutorial": "Protocol Tutorial",
      "Implementation Notes": "Implementation Notes",
      "Base Contracts": "Base Contracts",
      "Deployed Contracts": "Deployed Contracts",
      "ForceMove Apps": "ForceMove Apps",
      "Test Contracts": "Test Contracts",
      "Dapp Developers": "Dapp Developers",
      "Wallet Developers": "Wallet Developers",
      "Wallet Dev Tutorial": "Wallet Dev Tutorial",
      "Contract Developers": "Contract Developers"
    }
  },
  "pages-strings": {
    "Help Translate|recruit community translators for your project": "Help Translate",
    "Edit this Doc|recruitment message asking to edit the doc source": "Edit",
    "Translate this Doc|recruitment message asking to translate the docs": "Translate"
  }
}
